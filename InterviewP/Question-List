# Theoritical question Java  ----------------------------------------------------------------------------->

# 0 Java crash course
# 1 Java Collection Framework (Very Important) Link
# 2 Java OOPS (Very Important)
# 3 Is Java 100% Object oriented?
# 4 Difference between final, finally and finalize keywords
# 5 Why Java doesnâ€™t have concepts of pointers C/C++?
# 6 How to make a class immutable?
# 7 Difference between JDK, JRE and JRM
# 8 What is a JIT compiler?
# 9 What is a singleton class? How to make a class singleton?
# 10 Difference between process and threads?
# 11 Why is string immutable in Java?
# 12 What is difference between StringBuffer and StringBuilder?
# 13 What is a wrapper class?
# 14 Difference between Abstract Classes and Interfaces?
# 15 Different types of interfaces?
# 16 Why does java not support multiple inheritance?
# Java Quick Study Guide.docx


# Theoritical question OPPS -------------------->


# Theoritical question DSA -------------------->

# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#  Programatical Quetions of  Java -------------------------------------------------------------------------->

# addtion
# area and circumfrence of circle, rectangle.
# swap two varable  without or with third variable.
# area of triangle 
# si or ci 
# fahrenhight to celsius 
# commandlineArgument
# Driving lincence.
# Data type
# even odd
# firstProgram by cmd 
# frequency
# GFG
# wap take input and check whether it is character, digit, speacial Character.
# check upper case or lower case.
# check character is vowel or consonent.
# take input and print num of days in months.
# print employee sallaryslip.
# print student markseet.
# user can input rollno, 3subject marks, compute total marks, compute persentage.

# compute grade 
# >=90 A  grade
# <90 to >= 70 B grade 
# <70 to >=60 c grade 
# 60 to >= 50 D grade
# <50 f grade.
# print in marksheet style.

# leap year
# letter combination 
# Loop 10 to 1
# multiple if else
# prime
# print degit
# profitloss
# print total digit.

# program 
# public class program{
#     ststic int x;
#     static int fun(){
#         return x--;
#     }
#     public static void main(String [ args]){
#         while(fun()){
#             int y = fun();
#             system.out println(y);
#         }
#     }
# }

# salary.calc

# *******************************************************************************
# Recursion------------------>
# print num using recursion 
# print 5,3,1,2,4 recursion  hint eve, odd
# sum of digit
# ip = 12345
# op= 15
# check if num is palindrome using recursion 
# ip = 12345
# op = F 
# count 0 in digit using recursion 
# ip = 10340101
# op : 3
# power calc using recursion
#  input 3,6
# op : whatever 3 raise to the power 6 is 

# checka num is power of 2
# i/p : 16
# op: true
# checka num is power of 3
# checka num is power of 4

# subsecuence of a string
# ip: string str = "ravi";
# o/p: "", "r", "a", "v", "i", "ra", "rv", "ri", "ai", "av", "vi", "rav", "rai", "rvi", "avi", "ravi".
# all string permutation 
# ip : arr = {3,5,7,12,46,77}
# op : true

# Linear search---->
# search element in an array 
# search element in an array from last index.



# recursion type  1. single branch, multibranch

# pattern program using recursion 
# *****
# *****
# *****
# *****
# *****

# *
# **
# ***
# ****
# *****


# *****
# ****
# ***
# **
# *


# 1
# 23
# 456
# 78910


        #     *
        #    * *
        #   * * *
        #  * * * *
        # * * * * *  


# ***********
#  *********
#   *******
#    *****
#     ***
#      *



# abcde
# abcd
# abc
# ab 
# a 


# 2 month before 

# 1 in string print adjacentStar
# ip: str =  "abbabaab"
# op :  "ab*baba*ab"
# 2 armstron NUM 
# 3 countDigit
# countDigit return 
# factorial.java
# fibseries
 
# freCount freCount recursion.
# input : text = "ram sharma"
# output : {'r':2, 'a':3, 'm': 2,'s':1, 'h':1, }

# multybranch demo 
# print 1 to 0  using recursion. 
# replace pi value 
# i/p: str = "2*pi+3*pi=5*pi";
# o/p: str = "2*3.14+3*3.14= 5*3.14"
# stair climb 
# last month 
# dicecount
# mazepath
# diagonal mmaze path
# towerofhoni
# josephus problem


# backtrakin-------------------------->
# nqueen
# sodokusolve
# well formed parantheses
# latterCombination 
# combination sum : lc - 39
# permutation lc- 46
# Ratinmaze
# wordsearch
# countways for rate in a maje




# 2 week ago 
# barchart
# crud in array.
# max element
# secondmax element.



# last week 
# reverseArray
# array addition .
# pairsum 
# p15_sort01
# p16DNF
# p18LeadingElement
# p5_isArraySorted


# yesterday
# arraylowestandgighestneartosearch.
# binarysearch
# mapDemo
# find missing num in binary search
# you are given a list of n-1 integers and these are in the range of 1 to n. there are no duplicates in the list. one of the interger is missingin the list. find the missing int.

# input: arr[] = {1,2,4,6,3,7,8} op: 5
# input: arr[] = {1,2,3,5}
# output: 4;



# today
# A --- spit
# frequency
# GFG


# Programatical question OPPS -------------------->


# programetical question DSA -------------------->
# Array	------------>

# ' Contains Duplicate		
# ' Valid Anagram	
# ' Two Sum	Link	
# ' Group Anagrams	
# ' Top K Frequent Elements	
# ' Encode and Decode Strings   	
# ' Product of Array Except Self	
# ' Valid Sudoku	
# ' Longest Consecutive Sequence	
# ' Valid Palindrom
# ' Two Sum II Input Array Is Sorted	
# ' 3Sum	
# ' Container With Most Water	
# ' Trapping Rain Water	
# ' Best Time to Buy And Sell Stock		
# ' Longest Substring Without Repeating Characters		
# ' Longest Repeating Character Replacement	
# ' Permutation In String
# ' Minimum Window Substring	
# ' Sliding Window Maximum	




# ' Binary Search  --------------------------------->
# ' Binary Search	
# ' Search a 2D Matrix	
# ' Koko Eating Bananas	
# ' Find Minimum In Rotated Sorted Array		
# ' Search In Rotated Sorted Array		
# ' Time Based Key Value Store	
# ' Median of Two Sorted Arrays	




# ' Linked List	------------------------------------>
# ' Reverse Linked List		
# ' Merge Two Sorted Lists	
# ' Reorder List		
# ' Remove Nth Node From End of List	
# ' Copy List With Random Pointer		
# ' Add Two Numbers	
# ' Linked List Cycle	
# ' Find The Duplicate Number	
# ' LRU Cache	
# ' Merge K Sorted Lists	
# ' Reverse Nodes In K Group	

# ' Trees------------------------------------------->
# ' Invert Binary Tree	
# ' Maximum Depth of Binary Tree
# ' Diameter of Binary Tree	
# ' Balanced Binary Tree	
# ' Same Tree	
# ' Subtree of Another Tree	
# ' Lowest Common Ancestor of a Binary Search Tree	
# ' Binary Tree Level Order Traversal	
# ' Binary Tree Right Side View
# ' Count Good Nodes In Binary Tree	
# ' Validate Binary Search Tree	
# ' Kth Smallest Element In a Bst	
# ' Construct Binary Tree From Preorder And Inorder Traversal	
# ' Binary Tree Maximum Path Sum
# ' Serialize And Deserialize Binary Tree	



# ' Backtracking -------------------------------------------------------------->	
# ' Subsets	
# ' Combination Sum
# ' Permutations	
# ' Subsets II	
# ' Combination Sum II	
# ' Word Search	
# ' Palindrome Partitioning	
# ' Letter Combinations of a Phone Number	
# ' N Queens



# ' Dynamic Programing--------------------------------------------------------->
# ' Climbing Stairs	
# ' Min Cost Climbing Stairs	
# ' House Robber	
# ' House Robber II	L
# ' Longest Palindromic Substring	
# ' Palindromic Substrings	
# ' Decode Ways	
# ' Coin Change	
# ' Maximum Product Subarray	
# ' Word Break
# ' Longest Increasing Subsequence	
# ' Partition Equal Subset Sum	
# ' Unique Paths	
# ' Longest Common Subsequence	
# ' Best Time to Buy And Sell Stock With Cooldown
# ' Coin Change II	
# ' Target Sum
# ' Interleaving String
# ' Longest Increasing Path In a Matrix		
# ' Distinct Subsequences	
# ' Edit Distance	
# ' Burst Balloons	
# ' Regular Expression Matching	




# ' Stack	----------------------------------------------------------------------------->
# ' Valid Parentheses	
# ' Min Stack	
# ' Evaluate Reverse Polish Notation		
# ' Generate Parentheses	
# ' Daily Temperatures	
# ' Car Fleet	
# ' Largest Rectangle In Histogram	


# ' Heap	------------------------------------------------------------------------------->
# ' Kth Largest Element In a Stream	
# ' Last Stone Weight	
# ' K Closest Points to Origin
# ' Kth Largest Element In An Array		
# ' Task Scheduler	
# ' Design Twitter	
# ' Find Median From Data Stream



# ' Graphs	------------------------------------------------------------------------------------->
# ' Number of Islands		
# ' Max Area of Island	
# ' Clone Graph	
# ' Walls And Gates   	
# ' Rotting Oranges	
# ' Pacific Atlantic Water Flow	
# ' Surrounded Regions	
# ' Course Schedule	
# ' Course Schedule II	
# ' Graph Valid Tree   	
# ' Number of Connected Components In An Undirected Graph   		
# ' Redundant Connection	
# ' Word Ladder	
# ' Reconstruct Itinerary	
# ' Min Cost to Connect All Points	
# ' Network Delay Time	
# ' Swim In Rising Water	
# ' Alien Dictionary   	
# ' Cheapest Flights Within K Stops	



# ' Greedy Algorit	-------------------------------------------->
# ' Maximum Subarray	
# ' Jump Game	
# ' Jump Game II	
# ' Gas Station		
# ' Hand of Straights	
# ' Merge Triplets to Form Target Triplet		
# ' Partition Labels	
# ' Valid Parenthesis String








